# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Automatically update fastlane
# update_fastlane

default_platform(:ios)

# Default temporary keychain password and name, if not included from environment
TEMP_KEYCHAIN_NAME_DEFAULT = "fastlane_flutter"
TEMP_KEYCHAN_PASSWORD_DEFAULT = "temppassword"

# Remove the temporary keychain, if it exists
def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

# Create the temporary keychain with name and password
def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: false,
    timeout: 0
  )
end

# Ensure we have a fresh, empty temporary keychain
def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

platform :ios do
  desc "Build & sign iOS app"
  lane :build_ios do |options|
    api_key = app_store_connect_api_key(
      key_id: ENV['APPSTORE_API_KEY_ID'],
      issuer_id: ENV['APPSTORE_API_ISSUER_ID'],
      key_content: ENV['APPSTORE_API_KEY_CONTENT']
    )
    update_code_signing_settings(
      use_automatic_signing: false,
      path: "./Runner.xcodeproj",
      team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id),
      targets:"Runner",
      profile_name: "match AppStore #{CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)}",
      build_configurations: ["Release"],
      code_sign_identity: "iPhone Distribution"
    )
    keychain_name = ENV['TEMP_KEYCHAIN_NAME'] || TEMP_KEYCHAIN_NAME_DEFAULT
    keychain_password = ENV['TEMP_KEYCHAIN_PASSWORD'] || TEMP_KEYCHAN_PASSWORD_DEFAULT
    ensure_temp_keychain(keychain_name, keychain_password)
    match(
      app_identifier: CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier),
      type: "appstore",
      #readonly: is_ci,
      api_key: api_key,
      keychain_name: keychain_name,
      keychain_password: keychain_password
    )
    increment_build_number({
      build_number: latest_testflight_build_number + 1
    })
    sh "./flutter_build.sh --clean"
    build_ios_app(
      export_options: {
          method: "app-store"
      }
    )
    delete_temp_keychain(keychain_name)
  end

  desc "Upload iOS app to app store"
  lane :deploy_ios do |options|
    api_key = app_store_connect_api_key(
      key_id: ENV['APPSTORE_API_KEY_ID'],
      issuer_id: ENV['APPSTORE_API_ISSUER_ID'],
      key_content: ENV['APPSTORE_API_KEY_CONTENT']
    )
    # Upload to test flight or AppStore depending on caller parameters
    if options[:testflight]
      upload_to_testflight(
        skip_submission: true,
        ipa: "./Runner.ipa",
        api_key: api_key,
      )
    else
      deliver(
        skip_metadata: false,
        skip_screenshots: true,
        submit_for_review: true,
        force: true,
        ipa: "./Runner.ipa"
      )
    end
  end
end